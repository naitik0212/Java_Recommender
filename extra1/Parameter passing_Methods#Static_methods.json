{"content": "\nWe can pass any primitive data types or reference data type to a method.\n\nPrimitive type parameter[edit]\nThe primitive types are passed in by value. It means that as soon as the primitive type is passed in, there is no more link between the value inside the method and the source variable:\n\n\n\n\n\nCode section 3.69: A method modifying a variable.\n1 private void modifyValue(int number) {\n2   number += 1;\n3 }\n\n\n\n\n\n\n\n\n\nCode section 3.70: Passing primitive value to method.\n1 int i = 0;\n2 modifyValue(i);\n3 System.out.println(i);\n\n\n\n\n\n\n\n\nOutput for Code section 3.70\n0  \n\n\n\nAs you can see in code section 3.70, the modifyValue() method has not modified the value of i.\n\nReference type parameter[edit]\nThe object references are passed by value. It means that:\n\nThere is no more link between the reference inside the method and the source reference,\nThe source object itself and the object itself inside the method are still the same.\nYou must understand the difference between the reference of an object and the object itself. A object reference is the link between a variable name and an instance of object:\n\n\n\nObject object \u21d4 new Object()\n\nAn object reference is a pointer, an address to the object instance.\n\nThe object itself is the value of its attributes inside the object instance:\n\n\n\nobject.firstName\n\n\u21d2\n\n\"James\"\n\n\nobject.lastName\n\n\u21d2\n\n\"Gosling\"\n\n\nobject.birthDay\n\n\u21d2\n\n\"May 19\"\n\nTake a look at the example above:\n\n\n\n\n\nCode section 3.71: A method modifying an object.\n1 private void modifyObject(FirstClass anObject) {\n2   anObject.setName(\"Susan\");\n3 }\n\n\n\n\n\n\n\n\n\nCode section 3.72: Passing reference value to method.\n1 FirstClass object = new FirstClass();\n2 object.setName(\"Christin\");\n3 \n4 modifyObject(object);\n5 \n6 System.out.println(object.getName());\n\n\n\n\n\n\n\n\nOutput for Code section 3.72\nSusan\n\n\n\nThe name has changed because the method has changed the object itself and not the reference. Now take a look at the other example:\n\n\n\n\n\nCode section 3.73: A method modifying an object reference.\n1 private void modifyObject(FirstClass anObject) {\n2   anObject = new FirstClass();\n3   anObject.setName(\"Susan\");\n4 }\n\n\n\n\n\n\n\n\n\nCode section 3.74: Passing reference value to method.\n1 FirstClass object = new FirstClass();\n2 object.setName(\"Christin\");\n3 \n4 modifyObject(object);\n5 \n6 System.out.println(object.getName());\n\n\n\n\n\n\n\n\nOutput for Code section 3.74\nChristin\n\n\n\nThe name has not changed because the method has changed the reference and not the object itself. The behavior is the same as if the method was in-lined and the parameters were assigned to new variable names:\n\n\n\n\n\n\n\n\nCode section 3.75: In-lined method.\n 1 FirstClass object = new FirstClass();\n 2 object.setName(\"Christin\");\n 3 \n 4 // Start of the method\n 5 FirstClass anObject = object;\n 6 anObject = new FirstClass();\n 7 anObject.setName(\"Susan\");\n 8 // End of the method\n 9 \n10 System.out.println(object.getName());\n\n\n\n\n\n\n\n\nOutput for Code section 3.75\nChristin\n\n\n", "heading": "Parameter passing"}
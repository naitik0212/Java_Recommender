{"content": "\nAn easy way to dynamically load a Class is via the java.net.URLClassLoader class. This class can be used to load a Class or a collection of classes that are accessible via a URL. This is very similar to the -classpath parameter in the java executable. To create a URLClassLoader, use the factory method (as using the constructor requires a security privilege):\n\n\n\n\n\nCode section 10.4: Class loader.\n1 URLClassLoader classLoader = URLClassLoader.newInstance(\n2    new URL[]{\"http://example.com/javaClasses.jar\"});\n\n\nUnlike other dynamic class loading techniques, this can be used even without security permission provided the classes come from the same Web domain as the caller.\nOnce a ClassLoader instance is obtained, a class can be loaded via the loadClass method. For example, to load the class com.example.MyClass, one would:\n\n\n\n\n\nCode section 10.5: Class loading.\n1 Class<?> clazz = classLoader.load(\"com.example.MyClass\");\n\n\nExecuting code from a Class instance is explained in the Dynamic Invocation chapter.\n\n\n\n\n\n\nTo do:Add some exercises like the ones in Variables\n\n", "heading": "Simple Dynamic Class Loading"}
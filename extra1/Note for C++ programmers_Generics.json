{"content": "\nJava Generics are similar to C++ Templates in that both were added for the same reason. The syntax of Java Generic and C++ Template are also similar. There are some differences however. The C++ template can be seen as a kind of macro, in that a new copy of the code is generated for each generic type referenced. All extra code for templates is generated at compiler time.\nIn contrast, Java Generics are built into the language.  The same code is used for each generic type. For example:\n\n\n\n\n\nCode section 4.50: Java generics.\n1 Collection<String>  collString  = new ArrayList<String>();\n2 Collection<Integer> collInteger = new ArrayList<Integer>();\n\n\nBoth these objects appear as the same type at runtime (both ArrayList's). The generic type information is erased during compilation (type erasure). For example:\n\n\n\n\n\nCode section 4.51: Type erasure.\n1 public <T> void method(T argument) {\n2   T variable;\n3   \u2026\n4 }\n\n\nis transformed by erasure into:\n\n\n\n\n\nCode section 4.52: Transformation.\n1 public void method(Object argument) {\n2   Object variable;\n3   \u2026\n4 }\n\n\n\n\n Nested Classes\n\nJava ProgrammingGenerics\n\nAggregate \n", "heading": "Note for C++ programmers"}
{"content": "\nGenerally, it is best to make data private or protected.  Access to the data is controlled by setter and getter methods.  This lets the programmer control access to data, allowing him/her to check for and handle invalid data.\n\n\n\n\n\nCode section 3.51: Encapsulation.\n 1 private String name;\n 2 \n 3 /**\n 4  * This is a getter method because it accesses data from the object.\n 5  */\n 6 public String getName() {\n 7   return name;\n 8 }\n 9 \n10 /**\n11  * This is a setter method because it changes data in the object.\n12  */\n13 public boolean setName(String newName) {\n14   if (newName == null) {\n15     return false;\n16   } else {\n17     name = newName;\n18     return true;\n19   }\n20 }\n\n\nIn the code section 3.51, the setName() method will only change the value of name if the new name is not null.  Because setName() is conditionally changing name, it is wise to return a boolean to let the program know if the change was successful.\n\n\n\n Object Lifecycle\n\nJava ProgrammingScope\n\nNested Classes \n", "heading": "Field encapsulation"}
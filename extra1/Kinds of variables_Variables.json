{"content": "\nIn the Java programming language, there are four kinds of variables.\n\n\n\n\n\nCode listing 3.9: ClassWithVariables.java\n1 public class ClassWithVariables {\n2     public int id = 0;\n3     public static boolean isClassUsed;\n4 \n5     public void processData(String parameter) {\n6       Object currentValue = null;\n7     }\n8 }\n\n\nIn the code listing 3.9, are examples of all four kinds of variables.\n\nInstance variables: These are variables that are used to store the state of an object (for example, id). Every object created from a class definition would have its own copy of the variable. It is valid for and occupies storage for as long as the corresponding object is in memory.\nClass variables: These variables are explicitly defined within the class-level scope with a static modifier (for example, isClassUsed). No other variables can have a static modifier attached to them. Because these variables are defined with the static modifier, there would always be a single copy of these variables no matter how many times the class has been instantiated. They live as long as the class is loaded in memory.\nParameters or Arguments: These are variables passed into a method signature (for example, parameter). Recall the usage of the args variable in the main method. They are not attached to modifiers (i.e. public, private, protected or static) and they can be used everywhere in the method. They are in memory during the execution of the method and can't be used after the method returns.\nLocal variables: These variables are defined and used specifically within the method-level scope (for example, currentValue) but not in the method signature. They do not have any modifiers attached to it. They no longer exist after the method has returned.", "heading": "Kinds of variables"}
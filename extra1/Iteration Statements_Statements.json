{"content": "\nIteration Statements are statements that are used to iterate a block of statements. Such statements are often referred\nto as loops. Java offers four kinds of iterative statements.\n\nThe while loop\nThe do...while loop\nThe for loop\nThe foreach loop\nMain page: Java Programming/Keywords/while\nThe while loop iterates a block of code while the condition it specifies is true.\n\nThe syntax for the loop is:\n\nwhile (condition) {\n   statement;\n }\n\nHere the condition is an expression.\nAn expression as discussed earlier is any statement that returns a value. While condition statements\nevaluate to a boolean value, that is, either true or false. As long as the condition is\ntrue, the loop will iterate the block of code over and over and again. Once the condition evaluates\nto false, the loop exits to the next statement outside the loop.\n\nThe do...while loop[edit]\nThe do-while loop is functionally similar to the while loop, except the condition is evaluated AFTER the statement executes\n\ndo {\n   statement;\n } while (condition);\n\nMain page: Java Programming/Keywords/for\nThe for loop is a specialized while loop whose syntax is designed for easy iteration through a sequence of numbers. Example:\n\n\n\n\n\n\n\n\nCode section 3.16: A for loop.\n1 for (int i = 0; i < 100; i++) {\n2   System.out.println(i + \"\\t\" + i * i);\n3 }\n\n\n\n\n\n\n\n\nOutput for code listing 3.16 if you compile and run the statement above.\n 0      0\n 1      1\n 2      4\n 3      9\n ...\n 99     9801\n\n\n\nThe program prints the numbers 0 to 99 and their squares.\n\nThe same statement in a while loop:\n\n\n\n\n\nCode section 3.17: An alternative version.\n1 int i = 0;\n2 while (i < 100) {\n3    System.out.println(i + \"\\t\" + i * i);\n4    i++;\n5 }\n\n\nThe foreach loop[edit]\nThe foreach statement allows you to iterate through all the items in a collection,\nexamining each item in turn while still preserving its type. The syntax for the foreach statement is:\n\nfor (type item\u00a0: collection) statement;\n\nFor an example, we'll take an array of Strings denoting days in a week and traverse through the\ncollection, examining one item at a time.\n\n\n\n\n\n\n\n\nCode section 3.18: A foreach loop.\n1 String[] days = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};\n2 \n3 for (String day : days) {\n4   System.out.println(day);\n5 }\n\n\n\n\n\n\n\n\nOutput for code listing 3.18\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\n\n\n\nNotice that the loop automatically exits after the last item in the collection has been examined in the statement\nblock.\n\nAlthough the enhanced for loop can make code much clearer, it can't be used in some common situations.\n\nOnly access. Elements can not be assigned to, eg, not to increment each element in a collection.\nOnly single structure. It's not possible to traverse two structures at once, eg, to compare two arrays.\nOnly single element. Use only for single element access, eg, not to compare successive elements.\nOnly forward. It's possible to iterate only forward by single steps.\nAt least Java 5. Don't use it if you need compatibility with versions before Java 5.", "heading": "Iteration Statements"}
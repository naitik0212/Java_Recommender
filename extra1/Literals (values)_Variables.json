{"content": "\nNow that we know how variables should be named, let us look at the values of those variables. Simple values like numbers are called literals. This section shows you what literals are and how to use them. Consider the following code:\n\n\n\n\n\nCode section 3.48: Literals.\n1 int age = 24;\n2 long bankBalance = 20000005L;\n\n\nBy now, we've only seen how numbers work in assignment statements. Let's look at data types other than numbers. Characters are basically letters of the English alphabet. When writing a single character, we use single quotes to encapsulate them. Take a look at the code below:\n\n\n\n\n\nCode section 3.49: Character.\n1 char c = 'a';\n\n\nWhy, you ask? Well, the explanation is simple. If written without quotes, the system would think it's a variable identifier. That's the very distinction you have to make when differentiating between variables and their literal values. Character data types are a bit unusual. First, they can only hold a single character. What if you had to store a complete name within them, say John, would you write something like:\n\n\n\n\n\nCode section 3.50: Character list.\n1 char firstChar = 'J';\n2 char secondChar = 'o';\n3 char thirdChar = 'h';\n4 char fourthChar = 'n';\n\n\nNow, that's pathetic. Thankfully, there's a data type that handles large number of characters, it's called a String. A string can be initialized as follows:\n\n\n\n\n\nCode section 3.51: String.\n1 String name = \"John\";\n\n\nNotice, the use of double quotation marks instead of single quotation marks. That's the only thing you need to worry about.\n\n\n\n Boolean expressions\n\nJava ProgrammingVariables\n\nPrimitive Types \n", "heading": "Literals (values)"}
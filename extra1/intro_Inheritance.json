{"content": " Inheritance is one of the most powerful mechanisms of the Object Oriented Programming. It allows the reuse of the members of a class (called the superclass or the mother class) in another class (called subclass, child class or the derived class) that inherits from it. This way, classes can be built by successive inheritance.\n In Java, this mechanism is enabled by the extends keyword.\nExample:\n \n\n\n\nCode listing 4.9: Vehicle.java\n1 public class Vehicle {\n2     public int speed;\n3     public int numberOfSeats;\n4 }\n\n \n\n\n\nCode listing 4.10: Car.java\n1 public class Car extends Vehicle {\n2     public Car() {\n3         this.speed = 90;\n4         this.numberOfSeats = 5;\n5     }\n6 }\n\n In the Code listing 4.10, the class Car inherits from Vehicle, which means that the attributes speed and numberOfSeats are present in the class Car, whereas they are defined in the class Vehicle. Also, the constructor defined in the class Car allows to initialize those attributes.\nIn Java, the inheritance mechanism allows to define a class hierarchy with all the classes. Without explicit inheritance, a class implicitly inherits from the Object class. This Object class is the root of the class hierarchy.\n Some classes can't be inherited. Those classes are defined with the final keyword. For instance, the Integer class can't have subclasses. It is called a final class.\n", "heading": "intro_Inheritance"}
{"content": "\nWhen an object is sent through a network, the object needs to be re-created at the receiving host.\n\nObject Serialization\u00a0\nThe term Object Serialization refers to the act of converting the object to a byte stream. The byte stream can be stored on the file system or can be sent through a network.\nAt a later time the object can be re-created from that stream of bytes. The only requirement is that the same class has to be available both times, when the object is serialized and also when the object is re-created. If that happens on different servers, then the same class must be available on both servers.  Same class means that exactly the same version of the class must be available, otherwise the object won't be able to be re-created. This is a maintenance problem for those applications where java serialization is used to make objects persistent or to sent the object through the network.\nWhen a class is modified, there could be a problem re-creating those objects that were serialized using an earlier version of the class.\nJava has built-in support for serialization, using the Serializable interface; however, a class must first implement the Serializable interface.\n\nBy default, a class will have all of its fields serialized when converted into a data stream (with transient fields being skipped).  If additional handling is required beyond the default of writing all fields, you need to provide an implementation for the following three methods:\n\nprivate void writeObject(java.io.ObjectOutputStream out) throws IOException;\nprivate void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;\nprivate void readObjectNoData() throws ObjectStreamException;\nIf the object needs to write or provide a replacement object during serialization, it needs to implement the following two methods, with any access specifier:\n\nObject writeReplace() throws ObjectStreamException;\nObject readResolve() throws ObjectStreamException;\nNormally, a minor change to the class can cause the serialization to fail.  You can still allow the class to be loaded by defining the serialization version id:\n\n\n\n\n\nCode section 4.32: Serialization version id.\n1 private static final long serialVersionUID = 42L;\n\n", "heading": "Re-creating an object received from a remote source"}
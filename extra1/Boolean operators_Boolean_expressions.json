{"content": "\nThe Java boolean operators are based on the operations of the boolean algebra. The boolean operators operate directly on boolean values.\n\nHere is a list of four common boolean operators in Java:\n\n!\u00a0: Boolean NOT\n&&\u00a0: Boolean AND\n||\u00a0: Boolean inclusive OR\n^\u00a0: Boolean exclusive XOR\nThe boolean NOT operator (\"!\") inverts the value of a boolean expression.  The boolean AND operator (\"&&\") will result in true if and only if the values on both sides of the operator are true.  The boolean inclusive OR operator (\"||\") will result in true if either or both of the values on the sides of the operator is true.  The boolean exclusive XOR operator (\"^\") will result in true if one and only of the values on the sides of the operator is true.\n\nTo show how these operators are used, here is an example:\n\n\n\n\n\n\n\n\nCode section 3.38: Operands.\n 1 boolean iMTrue = true;\n 2 boolean iMTrueToo = true;\n 3 boolean iMFalse = false;\n 4 boolean iMFalseToo = false;\n 5 \n 6 System.out.println(\"NOT operand:\");\n 7 System.out.println(!iMTrue);\n 8 System.out.println(!iMFalse);\n 9 System.out.println(!(4 < 5));\n10 System.out.println(\"AND operand:\");\n11 System.out.println(iMTrue && iMTrueToo);\n12 System.out.println(iMFalse && iMFalseToo);\n13 System.out.println(iMTrue && iMFalse);\n14 System.out.println(iMTrue && !iMFalse);\n15 System.out.println(\"OR operand:\");\n16 System.out.println(iMTrue || iMTrueToo);\n17 System.out.println(iMFalse || iMFalseToo);\n18 System.out.println(iMTrue || iMFalse);\n19 System.out.println(iMFalse || !iMTrue);\n20 System.out.println(\"XOR operand:\");\n21 System.out.println(iMTrue ^ iMTrueToo);\n22 System.out.println(iMFalse ^ iMFalseToo);\n23 System.out.println(iMTrue ^ iMFalse);\n24 System.out.println(iMFalse ^ !iMTrue);\n\n\n\n\n\n\n\n\nOutput for code section 3.38\nNOT operand:\nfalse\ntrue\nfalse\nAND operand:\ntrue\nfalse\nfalse\ntrue\nOR operand:\ntrue\nfalse\ntrue\nfalse\nXOR operand:\nfalse\nfalse\ntrue\nfalse\n\n\n\nHere are the truth tables for the boolean operators:\n\n\n\na\n!a\n\n\ntrue\nfalse\n\n\nfalse\ntrue\n\n\n\na\nb\na && b\na || b\na ^ b\n\n\ntrue\ntrue\ntrue\ntrue\nfalse\n\n\ntrue\nfalse\nfalse\ntrue\ntrue\n\n\nfalse\ntrue\nfalse\ntrue\ntrue\n\n\nfalse\nfalse\nfalse\nfalse\nfalse\n\nFor help on simplifying complex logic, see De Morgan's laws.\nIn Java, boolean logic has a useful property called short circuiting.  This means that expressions will only be evaluated as far as necessary.  In the expression (a && b), if a is false, then b will not be evaluated because the expression will be false no matter what. Here is an example that shows that the second expression is not automatically checked:\n\n\n\n\n\n\n\n\nCode section 3.39: Short circuiting.\n1 System.out.println((4 < 5) || ((10 / 0) == 2));\n\n\n\n\n\n\n\n\nOutput for code section 3.39\ntrue\n\n\n\nTo disable this property, you can use & instead of && and | instead of || but it's not recommended.\n\nFor the bitwise operations on & and |, see Arithmetic expressions.\n\n\n Loop blocks\n\nJava ProgrammingBoolean expressions\n\nVariables \n", "heading": "Boolean operators"}
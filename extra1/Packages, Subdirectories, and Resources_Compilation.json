{"content": "\nEach Java top level class belongs to a package (covered in the chapter about Packages). This may be declared in a package statement at the beginning of the file; if that is missing, the class belongs to the unnamed package.\n\nFor compilation, the file must be in the right directory structure. A file containing a class in the unnamed package must be in the current/root directory; if the class belongs to a package, it must be in a directory with the same name as the package.\n\nThe convention is that package names and directory names corresponding to the package consist of only lower case letters.\n\nTop level package[edit]\nA class with this package declaration\n\n\n\n\n\nCode section 2.1: Package declaration\npackage example;\n\n\nhas to be in a directory named example.\n\nA class with this package declaration\n\n\n\n\n\nCode section 2.2: Package declaration with sub-packages \npackage org.wikibooks.en;\n\n\nhas to be in a directory named en which has to be a sub-directory of wikibooks which in turn has to be a sub-directory of org resulting in org/wikibooks/en on Linux or org\\wikibooks\\en on Windows.\n\nJava programs often contain non-code files such as images and properties files. These are referred to generally as resources and stored in directories local to the classes in which they're used. For example, if the class com.example.ExampleApp uses the icon.png file, this file could be stored as /com/example/resources/icon.png. These resources present a problem when a program is compiled, because javac does not copy them to wherever the .class files are being compiled to (see above); it is up to the programmer to move the resource files and directories.\n", "heading": "Packages, Subdirectories, and Resources"}
{"content": " \nPrimitive types are the most basic data types available within the Java language. There are 8: boolean, byte, char, short, int, long, float and double. These types serve as the building blocks of data manipulation in Java. Such types serve only one purpose \u2014 containing pure, simple values of a kind. Because these data types are defined into the Java type system by default, they come with a number of operations predefined. You can not define a new operation for such primitive types. In the Java type system, there are three further categories of primitives:\n Numeric primitives: short, int, long, float and double. These primitive data types hold only numeric data. Operations associated with such data types are those of simple arithmetic (addition, subtraction, etc.) or of comparisons (is greater than, is equal to, etc.)\nTextual primitives: byte and char. These primitive data types hold characters (that can be Unicode alphabets or even numbers). Operations associated with such types are those of textual manipulation (comparing two words, joining characters to make words, etc.). However, byte and char can also support arithmetic operations.\nBoolean and null primitives: boolean and null. All the primitive types have a fixed size. Thus, the primitive types are limited to a range of values. A smaller primitive type (byte) can contain less values than a bigger one (long).\n \n\nCategory\n\nTypes\n\nSize (bits)\n\nMinimum Value\n\nMaximum Value\n\nPrecision\n\nExample\n\n\nInteger\n\nbyte\n\n8\n\n-128\n\n127\n\nFrom +127 to -128\n\nbyte b = 65;\n\n\nchar\n\n16\n\n0\n\n216-1\n\nAll Unicode characters\n\nchar c = 'A'; char c = 65;\n\n\nshort\n\n16\n\n-215\n\n215-1\n\nFrom +32,767 to -32,768\n\nshort s = 65;\n\n\nint\n\n32\n\n-231\n\n231-1\n\nFrom +2,147,483,647 to -2,147,483,648\n\nint i = 65;\n\n\nlong\n\n64\n\n-263\n\n263-1\n\nFrom +9,223,372,036,854,775,807 to -9,223,372,036,854,775,808\n\nlong l = 65L;\n\n\nFloating-point\n\nfloat\n\n32\n\n2-149\n\n(2-2-23)\u00b72127\n\nFrom 3.402,823,5\u00a0E+38 to 1.4\u00a0E-45\n\nfloat f = 65f;\n\n\ndouble\n\n64\n\n2-1074\n\n(2-2-52)\u00b721023\n\nFrom 1.797,693,134,862,315,7\u00a0E+308 to 4.9\u00a0E-324\n\ndouble d = 65.55;\n\n\nOther\n\nboolean\n\n--\n\n--\n\n--\n\nfalse, true\n\nboolean b = true;\n\n\nvoid\n\n--\n\n--\n\n--\n\n--\n\n--\n\n Integer primitive types silently overflow:\n \n\n\n\n\n\n\nCode section 3.52: Several operators.\n1 int i = Integer.MAX_VALUE;\n2 System.out.println(i);\n3 i = i + 1;\n4 System.out.println(i);\n5 System.out.println(Integer.MIN_VALUE);\n\n\n\n\n\n\n\n\nConsole for Code section 3.52\n2147483647\n-2147483648\n-2147483648\n\n\n As Java is strongly typed, you can't assign a floating point number (a number with a decimal point) to an integer variable:\n \n\n\n\nCode section 3.53: Setting a floating point number as a value to an int (integer) type.\n1 int age;\n2 age = 10.5;\n\n A primitive type should be set by an appropriate value. The primitive types can be initialized with a literal. Most of the literals are primitive type values, except String Literals, which are instance of the String class.\n", "heading": "intro_Primitive_Types"}
{"content": "\nIn Java, there are several existing methods that already sort objects from any class like Collections.sort(List<T> list). However, Java needs to know the comparison rules between two objects. So when you define a new class and want the objects of your class to be sortable, you have to implement the Comparable and redefine the compareTo(Object obj) method. \n\nint compareTo(T o)\u00a0\nCompares two objects and return an integer:\nA negative integer means that the current object is before the parameter object in the natural ordering.\nZero means that the current object and the parameter object are equal.\nA positive integer means that the current object is after the parameter object in the natural ordering.\nLet's say that the name is more important than the address and the description is ignored.\n\n\n\n\n\nCode listing 5.6: SortableCustomer.java\n 1 public class SortableCustomer implements Comparable<SortableCustomer> {\n 2     private String name;\n 3     private String address;\n 4     private String description;\n 5     // ...\n 6     public int compareTo(SortableCustomer anotherCustomer) {\n 7         if (name.compareTo(anotherCustomer.getName()) == 0) {\n 8             return address.compareTo(anotherCustomer.getAddress();\n 9         } else {\n10             return name.compareTo(anotherCustomer.getName();\n11         }\n12     }\n13 \n14 }\n\n\nObjects that implement this interface can be used as keys in a sorted map or elements in a sorted set, without the need to specify a comparator.\n\nThe natural ordering for a class C is said to be consistent with equals if and only if e1.compareTo((Object) e2) == 0 has the same boolean value as e1.equals((Object) e2) for every e1 and e2 of class C. Note that null is not an instance of any class, and e.compareTo(null) should throw a NullPointerException even though e.equals(null) returns false.\n\nIt is strongly recommended (though not required) that natural orderings be consistent with equals. This is because sorted sets (and sorted maps) without explicit comparators behave \"strangely\" when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the equals method.\n", "heading": "Sorting/Ordering"}
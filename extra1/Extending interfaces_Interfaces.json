{"content": "\n Execution of this example on BlueJ.\nAn interface can extend several interfaces, similar to the way that a class can extend another class, using the extends keyword:\n\n\n\n\n\nCode listing 4.18: InterfaceA.java\n1 public interface InterfaceA {\n2   public void methodA();\n3 }\n\n\n\n\n\n\nCode listing 4.19: InterfaceB.java\n1 public interface InterfaceB {\n2   public void methodB();\n3 }\n\n\n\n\n\n\nCode listing 4.20: InterfaceAB.java\n1 public interface InterfaceAB extends InterfaceA, InterfaceB {\n2   public void otherMethod();\n3 }\n\n\nThis way, a class implementing the InterfaceAB interface has to implement the methodA(), the methodB() and the otherMethod() methods:\n\n\n\n\n\nCode listing 4.21: ClassAB.java\n 1 public class ClassAB implements InterfaceAB {\n 2   public void methodA() {\n 3     System.out.println(\"A\");\n 4   }\n 5 \n 6   public void methodB() {\n 7     System.out.println(\"B\");\n 8   }\n 9 \n10   public void otherMethod() {\n11     System.out.println(\"foo\");\n12   }\n13 \n14   public static void main(String[] args) {\n15     ClassAB classAb = new ClassAB();\n16     classAb.methodA();\n17     classAb.methodB();\n18     classAb.otherMethod();\n19   }\n20 }\n\n\nDoing so, a ClassAB object can be casted into InterfaceA, InterfaceB and InterfaceAB.\n\n\n\n Inheritance\n\nJava ProgrammingInterfaces\n\nOverloading Methods and Constructors \n", "heading": "Extending interfaces"}
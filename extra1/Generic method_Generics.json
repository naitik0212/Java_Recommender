{"content": "\nA generic type can be defined for just a method:\n\n\n\n\n\nCode section 4.37: Generic method.\n1 public <D> D assign(Collection<D> generic, D obj) {\n2   generic.add(obj);\n3   return obj;\n4 }\n\n\nHere a new identifier (D) has been chosen at the beginning of the method declaration. The type is specific to a method call and different types can be used for the same object instance:\n\n\n\n\n\nCode section 4.38: Generic method call.\n1 Collection<Integer> numbers = new ArrayList<Integer>();\n2 Integer number = assign(numbers, new Integer(1));\n3 Collection<String> texts = new ArrayList<String>();\n4 String text = assign(texts, \"Store it.\");\n\n\nThe actual type will be defined by the type of the method parameter. Hence, the generic type can't be defined only for the return value as it wouldn't be resolved. See the Class<T> section for a solution.\n", "heading": "Generic method"}
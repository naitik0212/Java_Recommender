{"content": "\nProgram flow can be affected using function/method calls, loops and iterations. Of various types of branching constructs,\nwe can easily pick out two generic branching methods.\n\nUnconditional Branching\nConditional Branching\nUnconditional Branching Statements[edit]\nIf you look closely at a method, you'll see that a method is a named statement block that is executed by calling that particular name. An unconditional branch is created either by invoking the method or by calling break, continue, return or throw, all of which are described below.\n\nWhen a name of a method is encountered in a flow, it stops execution in the current method and branches to the newly called method. After returning a value from the called method, execution picks up at the original method on the line below the method call.\n\n\n\n\n\n\n\n\nCode listing 3.8: UnconditionalBranching.java\n 1 public class UnconditionalBranching {\n 2     public static void main(String[] args) {\n 3         System.out.println(\"Inside main method! Invoking aMethod!\");\n 4         aMethod();\n 5         System.out.println(\"Back in main method!\");\n 6     }\n 7 \n 8     public static void aMethod() {\n 9         System.out.println(\"Inside aMethod!\");\n10     }\n11 }\n\n\n\n\n\n\n\n\nOutput provided with the screen of information running the above code.\nInside main method! Invoking aMethod!\nInside aMethod!\nBack in main method!\n\n\n\nThe program flow begins in the main method. Just as aMethod is invoked, the flow travels to\nthe called method. At this very point, the flow branches to the other method. Once the method is completed, the flow\nis returned to the point it left off and resumes at the next statement after the call to the method.\n", "heading": "Branching Statements"}
{"content": "\nSometimes we may want to change the ordering of a collection of objects from the same class. We may want to order descending or ascending order. We may want to sort by name or by address.\n\nWe need to create a class for each way of ordering. It has to implement the Comparator interface.\n\nSince Java 5.0, the Comparator interface is generic; that means when you implement it, you can specify what type of objects your comparator can compare.\n\n\n\n\n\nCode listing 5.7: CustomerComparator.java\n1 public class CustomerComparator implements Comparator<Customer> {\n2     public int compare(Customer cust1, Customer cust2) {\n3         return cust1.getName().compareTo(cust2.getName());\n4     }\n5 }\n\n\nThe above class then can be associated with a SortedSet or other collections that support sorting.\n\n\n\n\n\nCode section 5.21: Comparator usage.\n1 Collection<Customer> orderedCustomers = new TreeSet<Customer>(new CustomerComparator());\n\n\nUsing the Iterator the orderedCustomers collection can be iterated in order of sorted by name.\n\nA List can be sorted by the Collections' sort method.\n\n\n\n\n\nCode section 5.22: Customized comparison.\n1 java.util.Collections.sort(custList, new CustomerComparator());\n\n\nSorts the specified list according to the order induced by the specified comparator. All elements in the list must be mutually comparable using the specified comparator.\n\nAn array of objects can also be sorted with the help of a Comparator.\n\n\n\n\n\nCode section 5.23: Array sorting.\n1 SortableCustomer[] customerArray;\n2 //...\n3 java.util.Arrays.sort(customerArray, new CustomerComparator());\n\n\nSorts the specified array of Customer objects (customerArray) according to the order induced by the specified comparator. All elements in the array must be mutually comparable by the specified comparator.\n\n\n\n\n\n\nTo do:Add some exercises like the ones in Variables\n\n\n\n\n Map\n\nJava ProgrammingComparing Objects\n\nExceptions \n", "heading": "Change Sorting/Ordering"}
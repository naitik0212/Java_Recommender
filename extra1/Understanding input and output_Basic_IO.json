{"content": "\nThe Java platform is an isolated entity, a space on your OS in a way, where everything outside this system is its environment. The interaction between the system and its environment is a two-way dialog of sorts. Either the system receives messages from its environment, or it conveys its messages to the same. When a message is received by the system, it is called an input, its opposite is an output. On a whole, this communication is termed input/output abbreviated as I/O.\n\nThe following chapters are designed to introduce basic input and output in Java, including reading text input from the keyboard, outputting text to the monitor, and reading/writing files from the file system.  More advanced user interaction using Graphics and Graphical User Interface (GUI) programs is taken up in the later section on Swing.\n\nThere are two packages for I/O: the older java.io package (does not support symbolic links) and the newer java.nio (\"new io\") package that has improved exception handling at java.nio.file.\n\nSimple Java Output: Writing to the Screen[edit]\nWriting to the screen is very easy, and can be accomplished using one of two methods:\n\n\n\n\n\n\n\n\nCode section 9.1: Print \"Hello world\" without advancing to a new line\nSystem.out.print(\"Hello world\");\n\n\n\n\n\n\n\n\nOutput on the screen\nHello world\n\n\n\n\n\n\n\n\n\nCode section 9.2: Print \"Hello world\" and advance to a new line\nSystem.out.println(\"Hello world\");\n\n\n\n\n\n\n\n\nOutput on the screen\nHello world\n\n\n\n\nSimple Java Input: Inputting from the keyboard[edit]\nAs of version 5, Java provides a class in the java.util package called Scanner that simplifies keyboard input.\n\n\n\n\n\nCode section 9.3: Inputting with Scanner\nScanner kbdIn = new Scanner(System.in); // Instantiating a new Scanner object\nSystem.out.print(\"Enter your name: \"); // Printing out the prompt\nString name = kbdIn.nextLine(); // Reading a line of input (until the user hits enter) from the keyboard\n// and putting it in a String variable called name\nSystem.out.println(\"Welcome, \" + name); // Printing out welcome, followed by the user's name\n\n\n\n\n\n\nOn the screen\nEnter your name: John Doe\nWelcome, John Doe\n\n\nAlternatively, one could write a method to handle keyboard input:\n\n\n\n\n\nCode section 9.4: Line reader\npublic String readLine() {\n  // Creates a new BufferedReader object\n  BufferedReader x = new BufferedReader(new InputStreamReader(System.in));\n\n  // Reads a line of input and returns it directly\n  return x.readLine();\n}\n\n\nNote that the code above shouldn't be used in most applications, as it creates new Objects every time the method is run.\nA better alternative would be to create a separate class file to handle keyboard input.\n\n\n\n\n\n\nTo do:Add some exercises like the ones in Variables\n\n\n\n\n Annotations/Compiler and Annotations\n\nJava ProgrammingBasic IO\n\nStreams \n", "heading": "Understanding input and output"}
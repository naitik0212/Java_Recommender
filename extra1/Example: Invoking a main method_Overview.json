{"content": "\nOne way to understand how reflection works is to use reflection to model how the Java Runtime Environment (JRE) loads and executes a class. When you invoke a Java program\n\n\n\n\n\nConsole\n\njava fully-qualified-class-name arg0 ... argn\n\n\n\nand pass it command line arguments, the JRE must\n\nput the command line arguments arg0 ... argn into a String[] array\ndynamically load the target class named by fully-qualified-class-name\naccess the public static void main(String[]) method\ninvoke the main method, passing the string array main String[].\nSteps 2, 3, and 4 can be accomplished with Java reflection.\nBelow is an example of loading the Distance class, locating the main method, (see Understanding a Java Program) and invoking it via reflection.\n\n\n\n\n\nCode section 10.1: main() method invocation.\n 1 public static void invokeMain()\n 2    throws ClassNotFoundException,\n 3    \tExceptionInInitializerError,\n 4    \tIllegalAccessException,\n 5    \tIllegalArgumentException,\n 6    \tInvocationTargetException,\n 7    \tNoSuchMethodException,\n 8    \tSecurityException {\n 9    Class<?> distanceClass = Class.forName(\"Distance\");\n10    String[] points = {\"0\", \"0\", \"3\", \"4\"};\n11    Method mainMethod = distanceClass.getMethod(\"main\", String[].class);\n12    Object result = mainMethod.invoke(null, (Object) points);\n13 }\n\n\nThis code is obviously more complicated than simply calling\n\n\n\n\n\nCode section 10.2: main() method calling.\n1 Distance.main(new String[]{\"0\", \"0\", \"3\", \"4\"});\n\n\nHowever, the main Java runtime does not know about the Distance class. The name of the class to execute is a runtime value. Reflection allows a Java program to work with classes even though the classes are not known when the program was written.\nLet's explore what the invokeMain method is doing.\nThe first statement at line 9 is an example of dynamic class loading. The forName() method will load a Java class and return an instance of java.lang.Class that results from loading the class. In this case, we are loading the class \"Distance\" from the default package. We store the class object in the local variable distanceClass; its type is Class<?>.\nThe second statement at line 10 simply creates a String array with the four command line arguments we wish to pass to the main method of the Distance class.\nThe third statement at line 11 performs a reflection operation on the Distance class. The getMethod() method is defined for the Class class. It takes a variable number of parameters: the method name is the first parameter and the remaining parameters are the types of each of main's parameters. The method name is trivial: we want to invoke the main method, so we pass in the name \"main\". We then add a Class variable for each of the method parameters. main accepts one parameter (String[] args) so we add a single Class element representing the String[]. The getMethod method has a return type of java.lang.reflect.Method; we store the result in a local variable named mainMethod.\nFinally, we invoke the method by calling the invoke() method of the Method instance. This method's first parameter is the instance to invoke on, and the remaining parameters are for the invokee's parameters. Since we are invoking a static method and not an instance method, we pass null as the instance argument. Since we only have a single parameter we pass it as the second argument. However, we must cast the parameter to Object to indicate that the array is the parameter, and not that the parameters are in the array. See varargs for more details on this.\n\n\n\n\n\nCode section 10.3: invoke() call.\n1 Object result = mainMethod.invoke(null, arguments);\n\n\nThe invoke() method returns an Object that will contain the result that the reflected method returns. In this case, our main method is a void method, so we ignore the return type.\nMost of the methods in this short invokeMain method may throw various exceptions. The method declares all of them in its signatures. Here is a brief rundown of what might throw an exception:\n\nClass.forName(String) will throw ClassNotFoundException, if the named class cannot be located.\nClass.forName(String) will throw ExceptionInInitializerError, if the class could not be loaded due the static initializer throwing an exception or a static field's initialization throwing an exception.\nClass.getMethod(String name, Class parameterTypes[]) will throw\nNoSuchMethodException, if a matching method is not found, or is not public (use getDeclaredMethod to get a non-public method).\nSecurityException, if a security manager is installed and calling the method would result in an access violation (for example, the method is in the sun.* package designed for internal use only).\nMethod.invoke(Object instance, Object... arguments) may throw:\nIllegalAccessException, if this method is invoked in a manner that violates its access modifiers.\nIllegalArgumentException for various reasons, including\npassing an instance that does not implement this method.\nthe actual arguments do not match the method's arguments\nInvocationTargetException, if the underlying method (main in this case) throws an exception.\nIn addition to these exceptions, there are also errors and runtime exceptions that these methods may throw.\n\n\n\n\n\n\nTo do:Add some exercises like the ones in Variables\n\n", "heading": "Example: Invoking a main method"}
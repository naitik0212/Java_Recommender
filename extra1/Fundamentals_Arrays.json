{"content": "\nIn Java, an array is an object. This object has a given type for the contained primitive types or objects (int, char, String, ...). An array can be declared in several ways:\n\n\n\n\n\nCode section 3.52: Array declarations.\n1 int[] array1 = null;\n2 int array2[] = null;\n\n\nThose syntaxes are identical but the first one is recommended. It can also be instantiated in several ways:\n\n\n\n\n\nCode section 3.53: Array instantiations.\n1 array1 = new int[10];\n2 int[] array0 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; //this only works in the declaration\n3 array1 = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n\nAt line 1, we instantiate an array of 10 items that get the default value (which is 0 for int). At lines 2 and 3, we instantiate arrays of 10 given items. It will each be given an index according to its order. We can know the size of the array using the length attribute:\n\n\n\n\n\n\n\n\nCode section 3.54: The array size.\n1 int nbItems = 10;\n2 Object[] array3 = new Object[nbItems];\n3 System.out.println(array3.length);\n\n\n\n\n\n\n\n\nOutput for Code section 3.54\n10\n\n\n\nArrays are allocated at runtime, so the specified size in an array creation expression may be a variable (rather than a constant expression as in C). However, the size of an instantiated array never changes. If you need to change the size, you have to create a new instance. Items can be accessed by their index. Beware! The first index is 0:\n\n\n\n\n\n\n\n\nCode section 3.55: The array indexes.\n1 char[] array4 = {'a', 'b', 'c', 'd', 'e'};\n2 System.out.println(array4[2]);\n3 array4[4] = 'z';\n4 System.out.println(array4[4]);\n\n\n\n\n\n\n\n\nOutput for Code section 3.55\nc\nz\n\n\n\nIf you attempt to access to a too high index or negative index, you will get an ArrayIndexOutOfBoundsException.\n", "heading": "Fundamentals"}
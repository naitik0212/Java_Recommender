{"content": "\nData conversion (casting) can happen between two primitive types. There are two kinds of casting:\n\nImplicit: casting operation is not required; the magnitude of the numeric value is always preserved. However, precision may be lost when converting from integer to floating point types\nExplicit: casting operation required; the magnitude of the numeric value may not be preserved\n\n\n\n\nCode section 3.58: Implicit casting (int is converted to long, casting is not needed).\n1 int  i = 65;\n2 long l = i;\n\n\n\n\n\n\nCode section 3.59: Explicit casting (long is converted to int, casting is needed).\n1 long l = 656666L;\n2 int  i = (int) l;\n\n\nThe following table shows the conversions between primitive types, it shows the casting operation for explicit conversions:\n\n\n\n\n\nfrom byte\n\nfrom char\n\nfrom short\n\nfrom int\n\nfrom long\n\nfrom float\n\nfrom double\n\nfrom boolean\n\n\nto byte\n\n-\n\n(byte)\n\n(byte)\n\n(byte)\n\n(byte)\n\n(byte)\n\n(byte)\n\nN/A\n\n\nto char\n\n\n\n-\n\n(char)\n\n(char)\n\n(char)\n\n(char)\n\n(char)\n\nN/A\n\n\nto short\n\n\n\n(short)\n\n-\n\n(short)\n\n(short)\n\n(short)\n\n(short)\n\nN/A\n\n\nto int\n\n\n\n\n\n\n\n-\n\n(int)\n\n(int)\n\n(int)\n\nN/A\n\n\nto long\n\n\n\n\n\n\n\n\n\n-\n\n(long)\n\n(long)\n\nN/A\n\n\nto float\n\n\n\n\n\n\n\n\n\n\n\n-\n\n(float)\n\nN/A\n\n\nto double\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\nN/A\n\n\nto boolean\n\nN/A\n\nN/A\n\nN/A\n\nN/A\n\nN/A\n\nN/A\n\nN/A\n\n-\n\n\nUnlike C, C++ and similar languages, Java can't represent false as 0 or null and can't represent true as non-zero. Java can't cast from boolean to a non-boolean primitive data type, or vice versa.\n\n\nFor non primitive types:\n\n\n\n\nto Integer\nto Float\nto Double\nto String\nto Array\n\n\nInteger\n\n-\n\n(float)x\n\n(double)x  x.doubleValue()\n\nx.toString()  Float.toString(x)\n\nnew int[] {x}\n\n\nFloat\n\njava.text.DecimalFormat(\"#\").format(x)\n\n-\n\n(double)x\n\nx.toString()\n\nnew float[] {x}\n\n\nDouble\n\njava.text.DecimalFormat(\"#\").format(x)\n\njava.text.DecimalFormat(\"#\").format(x)\n\n-\n\nx.toString()\n\nnew double[] {x}\n\n\nString\n\nInteger.parseInt(x)\n\nFloat.parseFloat(x)\n\nDouble.parseDouble(x)\n\n-\n\nnew String[] {x}\n\n\nArray\n\nx[0]\n\nx[0]\n\nx[0]\n\nArrays.toString(x)\n\n-\n", "heading": "Data conversion (casting)"}
{"content": "\nInstead of overloading, you can use a dynamic number of arguments. After the last parameter, you can pass optional unlimited parameters of the same type. These parameters are defined by adding a last parameter and adding ... after its type. The dynamic arguments will be received as an array:\n\n\n\n\n\nCode section 4.27: Variable argument.\n 1   public void registerPersonInAgenda(String firstName, String lastName, Date... meeting) {\n 2     String[] person = {firstName, lastName};\n 3     lastPosition = lastPosition + 1;\n 4     contactArray[lastPosition] = person;\n 5 \n 6     if (meeting.length > 0) {\n 7       Date[] temporaryMeetings = registeredMeetings.length + meeting.length;\n 8       for (i = 0; i < registeredMeetings.length; i++) {\n 9         temporaryMeetings[i] = registeredMeetings[i];\n10       }\n11       for (i = 0; i < meeting.length; i++) {\n12         temporaryMeetings[registeredMeetings.length + i] = meeting[i];\n13       }\n14       registeredMeetings = temporaryMeetings;\n15     }\n16   }\n\n\nThe above method can be called with a dynamic number of arguments, for example:\n\n\n\n\n\nCode section 4.27: Constructor calls.\n1 registerPersonInAgenda(\"John\", \"Doe\");\n2 registerPersonInAgenda(\"Mark\", \"Lee\", new Date(), new Date());\n\n\nThis feature was not available before Java 1.5 .\n", "heading": "Variable Argument"}
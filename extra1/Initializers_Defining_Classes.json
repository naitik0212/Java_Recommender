{"content": "\nInitializers are blocks of code that are executed at the same time as initializers for fields.\n\nStatic initializers[edit]\nStatic initializers are blocks of code that are executed at the same time as initializers for static fields.  Static field initializers and static initializers are executed in the order declared.  The static initialization is executed after the class is loaded.\n\n\n\n\n\nCode section 4.2: Static initializer.\n1 static int count = 20;\n2 static int[] squares;\n3 static {  // a static initializer\n4     squares = new int[count];\n5     for (int i = 0; i < count; i++)\n6         squares[i] = i * i;\n7 }\n8 static int x = squares[5];  // x is assigned the value 25\n\n\nInstance initializers[edit]\nInstance initializers are blocks of code that are executed at the same time as initializers for instance (non-static) fields.  Instance field initializers and instance initializers are executed in the order declared. Both instance initializers and instance field initializers are executed during the invocation of a constructor.  The initializers are executed immediately after the superclass constructor and before the body of the constructor.\n\n\n\n Classes and Objects\n\nJava ProgrammingDefining Classes\n\nInheritance \n", "heading": "Initializers"}
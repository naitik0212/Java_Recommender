{"content": "\nThe break keyword exits a flow control loop, such as a for loop. It basically breaks the loop.\n\nIn the code section 3.34, the loop would print out all the numbers from 1 to 10, but we have a check for when i equals 5. When the loop reaches its fifth iteration, it will be cut short by the break statement, at which point it will exit the loop.\n\n\n\n\n\n\n\n\nCode section 3.34: An interrupted for loop.\n1 for (int i = 1; i <= 10; i++) {\n2     System.out.println(i);\n3     if (i == 5) {\n4        System.out.println(\"STOP!\");\n5        break;\n6     }\n7 }\n\n\n\n\n\n\n\n\nOutput for code section 3.34\n1\n2\n3\n4\n5\nSTOP!\n\n\n\nThe continue keyword jumps straight to the next iteration of a loop and evaluates the boolean expression controlling the loop. The code section 3.35 is an example of the continue statement in action:\n\n\n\n\n\n\n\n\nCode section 3.35: A for loop with a skipped iteration.\n1 for (int i = 1; i <= 10; i++) {\n2     if (i == 5) {\n3         System.out.println(\"Caught i == 5\");\n4         continue;\n5     }\n6     System.out.println(i);\n7 }\n\n\n\n\n\n\n\n\nOutput for code section 3.35\n1\n2\n3\n4\nCaught i == 5\n6\n7\n8\n9\n10\n\n\n\nAs the break and continue statements reduce the readability of the code, it is recommended to reduce their use or replace them with the use of if and while blocks. Some IDE refactoring operations will fail because of such statements.\n", "heading": "Break and continue keywords"}
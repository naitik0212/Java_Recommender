{"content": "\nA generic class does not hard code the type of a field, a return value or a parameter. The class only indicates that a generic type should be the same, for a given object instance. The generic type is not specified in the class definition. It is specified during object instantiation. This allows the generic type to be different from an instance to another. So we should write our class this way:\n\n\n\n\n\nCode listing 4.36: Repository.java\n 1 public class Repository<T> {\n 2 \n 3    public T item;\n 4 \n 5    public T getItem() {\n 6       return item;\n 7    }\n 8 \n 9    public void setItem(T newItem) {\n10       item = newItem;\n11    }\n12 }\n\n\nHere, the generic type is defined after the name of the class. Any new identifier can be chosen. Here, we have chosen T, which is the most common choice. The actual type is defined at the object instantiation:\n\n\n\n\n\nCode section 4.35: Instantiation.\n1 Repository<Integer> arithmeticRepository = new Repository<Integer>();\n2 arithmeticRepository.setItem(new Integer(1));\n3 Integer number = arithmeticRepository.getItem();\n4 \n5 Repository<String> textualRepository = new Repository<String>();\n6 textualRepository.setItem(\"Hello!\");\n7 String message = textualRepository.getItem();\n\n\nAlthough each object instance has its own type, each object instance is still strongly typed:\n\n\n\n\n\nCode section 4.36: Compile error.\n1 Repository<Integer> arithmeticRepository = new Repository<Integer>();\n2 arithmeticRepository.setItem(\"Hello!\");\n\n\nA class can define as many generic types as you like. Choose a different identifier for each generic type and separate them by a comma:\n\n\n\n\n\nCode listing 4.37: Repository.java\n 1 public class Repository<T, U> {\n 2 \n 3    public T item;\n 4 \n 5    public U anotherItem;\n 6 \n 7    public T getItem() {\n 8       return item;\n 9    }\n10 \n11    public void setItem(T newItem) {\n12       item = newItem;\n13    }\n14 \n15    public U getAnotherItem() {\n16       return anotherItem;\n17    }\n18 \n19    public void setAnotherItem(U newItem) {\n20       anotherItem = newItem;\n21    }\n22 }\n\n\nWhen a type that is defined with generic (for example, Collection<T>) is not used with generics (for example, Collection) is called a raw type.\n", "heading": "Generic class"}
{"content": "\nIt is used inside a sub-class method definition to call a method defined in the super class. Private methods of the super-class cannot be called. Only public and protected methods can be called by the super keyword.\nIt is also used by class constructors to invoke constructors of its parent class.\nSuper keyword are not used in static Method.\nsuper.<method-name>([zero or more arguments]);\n\nsuper([zero or more arguments]);\n\n\n\n\n\nCode listing 1: SuperClass.java\n1 public class SuperClass {\n2    public void printHello() {\n3       System.out.println(\"Hello from SuperClass\");\n4       return;\n5    }\n6 }\n\n\n\n\n\n\nCode listing 2: SubClass.java\n 1 public class SubClass extends SuperClass {\n 2    public void printHello() {\n 3       super.printHello();\n 4       System.out.println(\"Hello from SubClass\");\n 5       return;\n 6    }\n 7    public static main(String[] args) {\n 8       SubClass obj = new SubClass();\n 9       obj.printHello();\n10    }\n11 }\n\n\nRunning the above program:\n\n\n\n\n\nCommand for Code listing 2\n$Java SubClass\n\n\n\n\n\n\nOutput of Code listing 2\nHello from SuperClass\nHello from SubClass\n\n\nIn Java 1.5 and later, the \"super\" keyword is also used to specify a lower bound on a wildcard type parameter in Generics.\n\n\n\n\n\nCode section 1: A lower bound on a wildcard type parameter.\n1 public void sort(Comparator<? super T> comp) {\n2   ...\n3 }\n\n", "heading": "super"}